### More about Deferred Function Calls

Deferred function calls have been __introduced before__.
Due to the limited Go knowledge at that time,
some more details and use cases of deferred functions calls
are not touched in that article.
These details and use cases will be touched in the remaining of this article.

    === introduced before :: control-flows-more.html#defer

###+++++++++++ Calls to Many Built-in Functions With Return Results Can't Be Deferred

In Go, the result values of a call to custom functions can be all absent (discarded).
However, for built-in functions with non-blank return result lists,
the result values of their calls __mustn't be absent__,
except the calls to the built-in `copy` and `recover` functions.
On the other hand, we have learned that the result values of a deferred function call must be discarded,
so the calls to many built-in functions can't be deferred.

    === mustn't be absent :: exceptions.html#discard-return-results

Fortunately, the needs to defer built-in function calls
(with non-blank return result lists) are rare in practice.
As far as I know, only the calls to the built-in `append` function
may needed to be deferred sometimes.
For this case, we can defer a call to an anonymous function
which wraps the `append` call.
@@@ .line-numbers
''' go
package main

import "fmt"

func main() {
	s := []string{"a", "b", "c", "d"}
	defer fmt.Println(s) // [a x y d]
	// defer append(s[:1], "x", "y") // error
	defer func() {
		_ = append(s[:1], "x", "y")
	}()
}
'''

@@@ #function-evaluation-time
###+++++++++++ The Evaluation Moment of Deferred Function Values

The called function (value) in a deferred function call is evaluated
when the call is pushed into the defer-call stack of the current goroutine.
For example, the following program will print `false`.

@@@ .line-numbers
''' go
package main

import "fmt"

func main() {
	var f = func () {
		fmt.Println(false)
	}
	defer f()
	f = func () {
		fmt.Println(true)
	}
}
'''

The called function in a deferred function call may be a nil function value.
For such a case, the panic will occur when the call to the nil function is invoked,
instead of when the call is pushed into the defer-call stack of the current goroutine.
An example:
@@@ .line-numbers
''' go
package main

import "fmt"

func main() {
	defer fmt.Println("reachable 1")
	var f func() // f is nil by default
	defer f()    // panic here
	// The following lines are also reachable.
	fmt.Println("reachable 2")
	f = func() {} // useless to avoid panicking
}
'''

###+++++++++++ The Evaluation Moment of Receiver Arguments of Deferred Method Calls

As explained before, the arguments of a deferred function call are
__also evaluated when__ the deferred call is pushed into the defer-call stack
of the current goroutine.

    === also evaluated when :: control-flows-more.html#argument-evaluation-moment

Method receiver arguments are also not exceptions.
For example, the following program prints `1342`.

@@@ .line-numbers
''' go
package main

type T int

func (t T) M(n int) T {
  print(n)
  return t
}

func main() {
	var t T
	// "t.M(1)" is the receiver argument of the method
	// call ".M(2)", so it is evaluated when the
	// ".M(2)" call is pushed into defer-call stack.
	defer t.M(1).M(2)
	t.M(3).M(4)
}
'''

###+++++++++++ Deferred Calls Make Code Cleaner and Less Bug Prone

Example:

@@@ .line-numbers
''' go
import "os"

func withoutDefers(filepath string, head, body []byte) error {
	f, err := os.Open(filepath)
	if err != nil {
		return err
	}

	_, err = f.Seek(16, 0)
	if err != nil {
		f.Close()
		return err
	}

	_, err = f.Write(head)
	if err != nil {
		f.Close()
		return err
	}

	_, err = f.Write(body)
	if err != nil {
		f.Close()
		return err
	}

	err = f.Sync()
	f.Close()
	return err
}

func withDefers(filepath string, head, body []byte) error {
	f, err := os.Open(filepath)
	if err != nil {
		return err
	}
	defer f.Close()

	_, err = f.Seek(16, 0)
	if err != nil {
		return err
	}

	_, err = f.Write(head)
	if err != nil {
		return err
	}

	_, err = f.Write(body)
	if err != nil {
		return err
	}

	return f.Sync()
}
'''

{ //
https://joeshaw.org/dont-defer-close-on-writable-files/
}

Which one looks cleaner? Apparently, the one with the deferred calls, though a little.
And it is less bug prone, for there are so many `f.Close()` calls in the
function without deferred calls that it has a higher possibility to miss one of them.

The following is another example to show deferred calls can make code less bug prone.
If the `doSomething` calls panic in the following example,
the function `f2` will exit without unlocking the `Mutex` value.
So the function `f1` is less bug prone.

@@@ .line-numbers
''' go
var m sync.Mutex

func f1() {
	m.Lock()
	defer m.Unlock()
	doSomething()
}

func f2() {
	m.Lock()
	doSomething()
	m.Unlock()
}
'''

###+++++++++++ Performance Losses Caused by Deferring Function Calls

It is not always good to use deferred function calls.
For the official Go compiler, before version 1.13,
deferred function calls will cause a few performance losses at run time.
Since Go Toolchain 1.13, some common defer use cases have got optimized much,
so that generally we don't need to care about the performance loss problem caused by deferred calls.
Thank Dan Scales for making the great optimizations.

{ //
For example, in the following example, the methods `CounterB`
and `IncreaseB` are much more efficient than the methods
`CounterA` and `IncreaseA`.

@@@ .line-numbers
''' go
import "sync"

type T struct {
	mu sync.Mutex
	n  int64
}

func (t *T) CounterA() int64 {
	t.mu.Lock()
	defer t.mu.Unlock()
	return t.n
}

func (t *T) CounterB() (count int64) {
	t.mu.Lock()
	count = t.n
	t.mu.Unlock()
	return
}

func (t *T) IncreaseA() {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.n++
}

func (t *T) IncreaseB() {
	t.mu.Lock()
	t.n++ // this line will not panic for sure
	t.mu.Unlock()
}
'''

In the B-version functions, we should guarantee that the code between the
`Lock` and `Unlock` calls will never panic.
Generally, the A-version functions are recommended to be used in practice.
We should only adopt the B versions when we really care about
the performance of the involved functions.
}

@@@ #kind-of-resource-leaking
###+++++++++++ Kind-of Resource Leaking by Deferring Function Calls

A very large defer-call stack may also consume much memory,
and some resources might not get released in time if some calls are delayed too much.

For example, if there are many files needed to be handled in a call to the following function,
then a large number of file handlers will be not get released before the function exits.

@@@ .line-numbers
''' go
func writeManyFiles(files []File) error {
	for _, file := range files {
		f, err := os.Open(file.path)
		if err != nil {
			return err
		}
		defer f.Close()

		_, err = f.WriteString(file.content)
		if err != nil {
			return err
		}

		err = f.Sync()
		if err != nil {
			return err
		}
	}

	return nil
}
'''

For such cases, we can use an anonymous function to enclose the deferred calls
so that the deferred function calls will get executed earlier. For example,
the above function can be rewritten and improved as

@@@ .line-numbers
''' go
func writeManyFiles(files []File) error {
	for _, file := range files {
		if err := func() error {
			f, err := os.Open(file.path)
			if err != nil {
				return err
			}
			// The close method will be called at
			// the end of the current loop step.
			defer f.Close()

			_, err = f.WriteString(file.content)
			if err != nil {
				return err
			}

			return f.Sync()
		}(); err != nil {
			return err
		}
	}

	return nil
}
'''

Or we can extract the file handler as a new function.

@@@ .line-numbers
''' go
func writeManyFiles(files []File) error {
	for _, file := range files {
		if err := writeFile(file.path, file.content); err != nil {
			return err
		}
	}

	return nil
}

func writeFile(path string, content string) {
	f, err := os.Open(path)
	if err != nil {
		return err
	}
	// The close method will be called at
	// the end of the current function.
	defer f.Close()

	_, err = f.WriteString(content)
	if err != nil {
		return err
	}

	return f.Sync()
}
'''


